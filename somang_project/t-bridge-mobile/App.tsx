import React from 'react';
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, Text, View, TouchableOpacity, Alert, Linking, Platform, BackHandler } from 'react-native';
import { SafeAreaView, SafeAreaProvider, useSafeAreaInsets } from 'react-native-safe-area-context';
import { WebView } from 'react-native-webview';
import * as WebBrowser from 'expo-web-browser';
import * as Location from 'expo-location';
import { supabase } from './src/lib/supabase';

function AppContent() {
  const [user, setUser] = React.useState<any>(null);  
  const [webUrl, setWebUrl] = React.useState<string>('http://192.168.0.123:50331/login'); // HTTPÎ°ú Îã§Ïãú Î≥ÄÍ≤Ω (SSL Ïù∏Ï¶ùÏÑú Î¨∏Ï†ú)
  const insets = useSafeAreaInsets();
  const webViewRef = React.useRef<WebView>(null);

  // ÎÑ§Ïù¥Ìã∞Î∏å ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠ Ï≤òÎ¶¨ Ìï®Ïàò
  const handleLocationRequest = async () => {
    try {
      console.log('üìç ÎÑ§Ïù¥Ìã∞Î∏å ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠ ÏãúÏûë...');
      console.log('üìç Location Î™®Îìà ÏÉÅÌÉú:', !!Location);
      
      // ÌòÑÏû¨ Í∂åÌïú ÏÉÅÌÉú ÌôïÏù∏
      let { status: existingStatus } = await Location.getForegroundPermissionsAsync();
      console.log('üìç ÌòÑÏû¨ Í∂åÌïú ÏÉÅÌÉú:', existingStatus);
      
      let finalStatus = existingStatus;
      
      // Í∂åÌïúÏù¥ ÏóÜÏúºÎ©¥ ÏöîÏ≤≠
      if (existingStatus !== 'granted') {
        console.log('üìç ÏúÑÏπò Í∂åÌïú ÏöîÏ≤≠ Ï§ë...');
        const { status } = await Location.requestForegroundPermissionsAsync();
        finalStatus = status;
        console.log('üìç Í∂åÌïú ÏöîÏ≤≠ Í≤∞Í≥º:', status);
      }
      
      if (finalStatus !== 'granted') {
        console.error('‚ùå ÏúÑÏπò Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§');
        
        // WebViewÏóê ÏóêÎü¨ Î©îÏãúÏßÄ Ï†ÑÏÜ°
        const errorScript = `
          (function() {
            console.log('‚ùå ÎÑ§Ïù¥Ìã∞Î∏åÏóêÏÑú ÏúÑÏπò Í∂åÌïú Í±∞Î∂ÄÎê®');
            
            // Î©îÏãúÏßÄ Ïù¥Î≤§Ìä∏ ÏßÅÏ†ë Î∞úÏÉùÏãúÌÇ§Í∏∞
            const event = new MessageEvent('message', {
              data: {
                type: 'native-location-error',
                error: 'ÏúÑÏπò Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§. Ïï± ÏÑ§Ï†ïÏóêÏÑú ÏúÑÏπò Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî.'
              }
            });
            
            window.dispatchEvent(event);
            
            // Î∞±ÏóÖÏö© - postMessageÎèÑ Ìï®Íªò Ìò∏Ï∂ú
            if (window.postMessage) {
              window.postMessage({
                type: 'native-location-error',
                error: 'ÏúÑÏπò Í∂åÌïúÏù¥ Í±∞Î∂ÄÎêòÏóàÏäµÎãàÎã§. Ïï± ÏÑ§Ï†ïÏóêÏÑú ÏúÑÏπò Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî.'
              }, '*');
            }
            
            console.log('‚ùå ÎÑ§Ïù¥Ìã∞Î∏å ÏúÑÏπò Í∂åÌïú Ïò§Î•ò Ï†ÑÏÜ° ÏôÑÎ£å');
          })();
        `;
        webViewRef.current?.injectJavaScript(errorScript);
        return;
      }

      console.log('‚úÖ ÏúÑÏπò Í∂åÌïú ÌöçÎìù, ÌòÑÏû¨ ÏúÑÏπò Ï°∞Ìöå ÏãúÏûë...');
      
      // ÌòÑÏû¨ ÏúÑÏπò Ï°∞Ìöå
      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High,
        timeInterval: 5000,
        distanceInterval: 10,
      });

      const { latitude, longitude } = location.coords;
      console.log('üìç ÎÑ§Ïù¥Ìã∞Î∏å ÏúÑÏπò Ï°∞Ìöå ÏÑ±Í≥µ:', latitude, longitude);

      // WebViewÏóê ÏúÑÏπò Ï†ïÎ≥¥ Ï†ÑÏÜ° Î∞è ÏßÅÏ†ë Ï≤òÎ¶¨
      const locationScript = `
        (function() {
          console.log('üöÄ JavaScript Ïã§Ìñâ ÏãúÏûë - ÏúÑÏπò Ï†ïÎ≥¥ Ï†ÑÏÜ°');
          console.log('üìç ÎÑ§Ïù¥Ìã∞Î∏å ‚Üí WebView ÏúÑÏπò Ï†ïÎ≥¥ Ï†ÑÏÜ°:', ${latitude}, ${longitude});
          
          // React Native ÌÜµÏã† ÌôïÏù∏
          if (window.ReactNativeWebView) {
            window.ReactNativeWebView.postMessage(JSON.stringify({
              type: 'debug', 
              message: 'JavaScript Ï£ºÏûÖ Ïã§ÌñâÎê® - ÏúÑÏπò: ' + ${latitude} + ', ' + ${longitude}
            }));
          }
          
          // ÏßÅÏ†ë Ïπ¥Ïπ¥Ïò§ API Ìò∏Ï∂úÌï¥ÏÑú Ï£ºÏÜå Î≥ÄÌôò ÏãúÎèÑ
          const processLocationDirectly = async () => {
            try {
              console.log('üó∫Ô∏è Ïπ¥Ïπ¥Ïò§ API ÏßÅÏ†ë Ìò∏Ï∂ú ÏãúÏûë');
              
              // React Ïª¥Ìè¨ÎÑåÌä∏Ïùò Ìï®ÏàòÍ∞Ä ÏûàÏúºÎ©¥ Î®ºÏ†Ä ÏãúÎèÑ (Îçî ÏïàÏ†ïÏ†Å)
              if (typeof window.processLocationCoordinates === 'function') {
                console.log('üöÄ React processLocationCoordinates Ìï®Ïàò Ïö∞ÏÑ† Ìò∏Ï∂ú');
                window.processLocationCoordinates(${latitude}, ${longitude});
                return; // React Ìï®ÏàòÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ìò∏Ï∂úÎêòÎ©¥ Ïó¨Í∏∞ÏÑú Ï¢ÖÎ£å
              }
              
              console.log('‚ö†Ô∏è React Ìï®Ïàò ÏóÜÏùå - ÏßÅÏ†ë Ïπ¥Ïπ¥Ïò§ SDK Î°úÎìú ÏãúÎèÑ');
              
              // Ïπ¥Ïπ¥Ïò§ SDK Í∞ïÏ†ú Î°úÎìú (React Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ïã§Ìå®Ìïú Í≤ΩÏö∞)
              const loadKakaoSDK = () => {
                return new Promise((resolve, reject) => {
                  // Ïù¥ÎØ∏ ÏûàÏúºÎ©¥ Î∞îÎ°ú ÏÇ¨Ïö©
                  if (window.kakao && window.kakao.maps && window.kakao.maps.services) {
                    resolve(true);
                    return;
                  }
                  
                  // Ïä§ÌÅ¨Î¶ΩÌä∏Í∞Ä ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
                  if (!document.getElementById('kakao-maps-sdk')) {
                    const script = document.createElement('script');
                    script.id = 'kakao-maps-sdk';
                    script.src = 'https://dapi.kakao.com/v2/maps/sdk.js?appkey=2fe616056f4156a5ba0e3260f3f4c7b0&libraries=services&autoload=false';
                    script.async = false;
                    
                    script.onload = () => {
                      if (window.kakao && window.kakao.maps) {
                        window.kakao.maps.load(() => {
                          if (window.kakao.maps.services) {
                            resolve(true);
                          } else {
                            reject(new Error('Services not loaded'));
                          }
                        });
                      } else {
                        reject(new Error('Kakao maps not loaded'));
                      }
                    };
                    
                    script.onerror = () => reject(new Error('Script load failed'));
                    document.head.appendChild(script);
                  }
                });
              };
              
              // SDK Î°úÎìú ÏãúÎèÑ
              await loadKakaoSDK();
              console.log('‚úÖ Ïπ¥Ïπ¥Ïò§ SDK Í∞ïÏ†ú Î°úÎìú ÏôÑÎ£å');
              
              // React Ïª¥Ìè¨ÎÑåÌä∏Ïóê SDK Ï§ÄÎπÑ ÏÉÅÌÉú ÏïåÎ¶º
              if (typeof window.setSdkReady === 'function') {
                window.setSdkReady(true);
              }
              
              // Kakao Maps SDKÍ∞Ä Î°úÎìúÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
              let attempts = 0;
              const maxAttempts = 30; // 3Ï¥à ÎåÄÍ∏∞
              
              const waitForKakao = () => {
                return new Promise((resolve, reject) => {
                  const checkKakao = () => {
                    attempts++;
                    if (window.kakao && window.kakao.maps && window.kakao.maps.services) {
                      console.log('‚úÖ Ïπ¥Ïπ¥Ïò§ SDK Î∞úÍ≤¨Îê®');
                      resolve(true);
                    } else if (attempts >= maxAttempts) {
                      console.log('‚ùå Ïπ¥Ïπ¥Ïò§ SDK ÎåÄÍ∏∞ ÏãúÍ∞Ñ Ï¥àÍ≥º');
                      reject(new Error('Kakao SDK timeout'));
                    } else {
                      console.log('‚è≥ Ïπ¥Ïπ¥Ïò§ SDK ÎåÄÍ∏∞ Ï§ë... (' + attempts + '/' + maxAttempts + ')');
                      setTimeout(checkKakao, 100);
                    }
                  };
                  checkKakao();
                });
              };
              
              await waitForKakao();
              
              console.log('üó∫Ô∏è Ïπ¥Ïπ¥Ïò§ Geocoder ÏÉùÏÑ±');
              const geocoder = new window.kakao.maps.services.Geocoder();
              
              geocoder.coord2Address(${longitude}, ${latitude}, (result, status) => {
                console.log('üó∫Ô∏è Ïπ¥Ïπ¥Ïò§ Geocoding Í≤∞Í≥º:', status, result);
                
                if (status === window.kakao.maps.services.Status.OK && result.length > 0) {
                  const addressData = result[0];
                  let primaryAddress = '';
                  
                  if (addressData.address && addressData.address.address_name) {
                    primaryAddress = addressData.address.address_name;
                  } else if (addressData.road_address && addressData.road_address.address_name) {
                    primaryAddress = addressData.road_address.address_name;
                  }
                  
                  console.log('üéâ Ï£ºÏÜå Î≥ÄÌôò ÏÑ±Í≥µ:', primaryAddress);
                  
                  if (window.ReactNativeWebView) {
                    window.ReactNativeWebView.postMessage(JSON.stringify({
                      type: 'debug',
                      message: 'Ï£ºÏÜå Î≥ÄÌôò ÏÑ±Í≥µ: ' + primaryAddress
                    }));
                  }
                  
                  // React Ïª¥Ìè¨ÎÑåÌä∏Ïùò Ìï®ÏàòÎì§ ÏßÅÏ†ë Ìò∏Ï∂ú
                  if (typeof window.processLocationCoordinates === 'function') {
                    console.log('üöÄ React processLocationCoordinates Ìï®Ïàò ÏßÅÏ†ë Ìò∏Ï∂ú');
                    window.processLocationCoordinates(${latitude}, ${longitude});
                  } else {
                    console.log('‚ùå processLocationCoordinates Ìï®Ïàò ÏóÜÏùå');
                    
                    // Ìï®ÏàòÍ∞Ä ÏóÜÏúºÎ©¥ DOM Ï°∞ÏûëÏúºÎ°ú fallback
                    setTimeout(() => {
                      // Î°úÎî© ÏÉÅÌÉú Ìï¥Ï†ú
                      if (typeof window.setLocationLoading === 'function') {
                        window.setLocationLoading(false);
                      }
                      
                      const loadingButtons = document.querySelectorAll('button');
                      loadingButtons.forEach(btn => {
                        if (btn.textContent && btn.textContent.includes('ÏúÑÏπò Ï∞æÎäî Ï§ë')) {
                          btn.textContent = 'ÌòÑÏû¨ ÏúÑÏπò Î∂àÎü¨Ïò§Í∏∞';
                          btn.disabled = false;
                        }
                      });
                      
                      // Î°úÎî© Ïä§ÌîºÎÑà Ï†úÍ±∞
                      const spinners = document.querySelectorAll('[class*="animate-spin"]');
                      spinners.forEach(spinner => {
                        const parent = spinner.closest('div');
                        if (parent && parent.textContent && parent.textContent.includes('ÏúÑÏπò')) {
                          parent.style.display = 'none';
                        }
                      });
                    }, 500);
                  }
                  
                } else {
                  console.error('‚ùå Ïπ¥Ïπ¥Ïò§ Geocoding Ïã§Ìå®:', status);
                  if (window.ReactNativeWebView) {
                    window.ReactNativeWebView.postMessage(JSON.stringify({
                      type: 'debug',
                      message: 'Ï£ºÏÜå Î≥ÄÌôò Ïã§Ìå®: ' + status
                    }));
                  }
                  
                  // Ïã§Ìå® Ïãú ÏóêÎü¨ ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤Ω
                  if (typeof window.setLocationError === 'function') {
                    window.setLocationError('Ï£ºÏÜå Î≥ÄÌôòÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
                  } else {
                    setTimeout(() => {
                      const loadingButtons = document.querySelectorAll('button');
                      loadingButtons.forEach(btn => {
                        if (btn.textContent && btn.textContent.includes('ÏúÑÏπò Ï∞æÎäî Ï§ë')) {
                          btn.textContent = 'ÌòÑÏû¨ ÏúÑÏπò Î∂àÎü¨Ïò§Í∏∞';
                          btn.disabled = false;
                        }
                      });
                    }, 500);
                  }
                }
              });
              
            } catch (error) {
              console.error('‚ùå ÏßÅÏ†ë Ïπ¥Ïπ¥Ïò§ API Ìò∏Ï∂ú Ïò§Î•ò:', error);
              if (window.ReactNativeWebView) {
                window.ReactNativeWebView.postMessage(JSON.stringify({
                  type: 'debug',
                  message: 'ÏßÅÏ†ë API Ìò∏Ï∂ú Ïò§Î•ò: ' + error.message
                }));
              }
              
              // Ïò§Î•ò Ïãú ÏÉÅÌÉú Î≥µÍµ¨
              if (typeof window.setLocationError === 'function') {
                window.setLocationError('ÏúÑÏπò Ï†ïÎ≥¥ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
              } else {
                setTimeout(() => {
                  const loadingButtons = document.querySelectorAll('button');
                  loadingButtons.forEach(btn => {
                    if (btn.textContent && btn.textContent.includes('ÏúÑÏπò Ï∞æÎäî Ï§ë')) {
                      btn.textContent = 'ÌòÑÏû¨ ÏúÑÏπò Î∂àÎü¨Ïò§Í∏∞';
                      btn.disabled = false;
                    }
                  });
                }, 500);
              }
            }
          };
          
          // ÏßÅÏ†ë Ï≤òÎ¶¨ ÏãúÏûë
          processLocationDirectly();
          
          // Í∏∞Ï°¥ Î©îÏãúÏßÄ Ï†ÑÏÜ° Î∞©Î≤ïÎì§ÎèÑ Ïú†ÏßÄ
          try {
            // Î∞©Î≤ï 1: MessageEvent ÏßÅÏ†ë Î∞úÏÉù
            console.log('üìç Î∞©Î≤ï 1: MessageEvent ÏßÅÏ†ë Î∞úÏÉù');
            const event = new MessageEvent('message', {
              data: {
                type: 'native-location-success',
                latitude: ${latitude},
                longitude: ${longitude}
              }
            });
            window.dispatchEvent(event);
            console.log('üìç Î∞©Î≤ï 1 ÏôÑÎ£å');
            
            // Î∞©Î≤ï 2: postMessage ÏÇ¨Ïö©
            console.log('üìç Î∞©Î≤ï 2: postMessage ÏÇ¨Ïö©');
            if (window.postMessage) {
              window.postMessage({
                type: 'native-location-success',
                latitude: ${latitude},
                longitude: ${longitude}
              }, '*');
              console.log('üìç Î∞©Î≤ï 2 ÏôÑÎ£å');
            }
            
            // Î∞©Î≤ï 3: Í∏ÄÎ°úÎ≤å Î≥ÄÏàòÎ°ú Ï†ÑÎã¨
            console.log('üìç Î∞©Î≤ï 3: Í∏ÄÎ°úÎ≤å Î≥ÄÏàò ÏÑ§Ï†ï');
            window.__NATIVE_LOCATION_DATA__ = {
              type: 'native-location-success',
              latitude: ${latitude},
              longitude: ${longitude}
            };
            
            // Î∞©Î≤ï 4: document Ïù¥Î≤§Ìä∏
            console.log('üìç Î∞©Î≤ï 4: document Ïù¥Î≤§Ìä∏');
            const docEvent = new MessageEvent('message', {
              data: {
                type: 'native-location-success',
                latitude: ${latitude},
                longitude: ${longitude}
              }
            });
            document.dispatchEvent(docEvent);
            console.log('üìç Î∞©Î≤ï 4 ÏôÑÎ£å');
            
          } catch (error) {
            console.error('‚ùå Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïò§Î•ò:', error);
            if (window.ReactNativeWebView) {
              window.ReactNativeWebView.postMessage(JSON.stringify({
                type: 'debug',
                message: 'Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïò§Î•ò: ' + error.message
              }));
            }
          }
          
          console.log('‚úÖ JavaScript Ïã§Ìñâ ÏôÑÎ£å');
        })();
      `;
      console.log('üìç JavaScript Ï£ºÏûÖ ÏãúÏûë');
      webViewRef.current?.injectJavaScript(locationScript);
      console.log('üìç JavaScript Ï£ºÏûÖ ÏôÑÎ£å');

    } catch (error) {
      console.error('‚ùå ÎÑ§Ïù¥Ìã∞Î∏å ÏúÑÏπò Ï°∞Ìöå Ïã§Ìå®:', error);
      console.error('‚ùå Ïò§Î•ò ÌÉÄÏûÖ:', typeof error);
      console.error('‚ùå Ïò§Î•ò ÏÉÅÏÑ∏:', JSON.stringify(error, null, 2));
      
      let errorMessage = 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò';
      if (error instanceof Error) {
        errorMessage = error.message;
      } else if (typeof error === 'object' && error !== null && 'message' in error) {
        errorMessage = String(error.message);
      }
      
      // WebViewÏóê ÏóêÎü¨ Î©îÏãúÏßÄ Ï†ÑÏÜ°
      const errorScript = `
        (function() {
          console.error('‚ùå ÎÑ§Ïù¥Ìã∞Î∏å ÏúÑÏπò Ïò§Î•ò:', '${errorMessage}');
          
          // Î©îÏãúÏßÄ Ïù¥Î≤§Ìä∏ ÏßÅÏ†ë Î∞úÏÉùÏãúÌÇ§Í∏∞
          const event = new MessageEvent('message', {
            data: {
              type: 'native-location-error',
              error: 'ÏúÑÏπò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${errorMessage}'
            }
          });
          
          window.dispatchEvent(event);
          
          // Î∞±ÏóÖÏö© - postMessageÎèÑ Ìï®Íªò Ìò∏Ï∂ú
          if (window.postMessage) {
            window.postMessage({
              type: 'native-location-error',
              error: 'ÏúÑÏπò Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${errorMessage}'
            }, '*');
          }
          
          console.log('‚ùå ÎÑ§Ïù¥Ìã∞Î∏å ÏúÑÏπò ÏùºÎ∞ò Ïò§Î•ò Ï†ÑÏÜ° ÏôÑÎ£å');
        })();
      `;
      webViewRef.current?.injectJavaScript(errorScript);
    }
  };

  React.useEffect(() => {
    // ÌòÑÏû¨ ÏÑ∏ÏÖò ÌôïÏù∏
    const checkSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setUser(session?.user ?? null);
      console.log('ÌòÑÏû¨ ÏÑ∏ÏÖò:', session?.user?.email || 'Î°úÍ∑∏Ïù∏ ÏïàÎê®');
      
      // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏóê Îî∞Îùº URL Î≥ÄÍ≤Ω (WebViewÎäî Í≥ÑÏÜç Ïú†ÏßÄ)
      if (session?.user) {
        console.log('Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©Ïûê - Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô');
        setWebUrl('http://192.168.0.123:50331/');
      } else {
        console.log('Î°úÍ∑∏Ïù∏ ÏïàÎê® - Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ Ïú†ÏßÄ');
        setWebUrl('http://192.168.0.123:50331/login');
      }
    };
    
    checkSession();

    // ÏÑ∏ÏÖò Î≥ÄÍ≤Ω Î¶¨Ïä§ÎÑà
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user ?? null);
      console.log('ÏÑ∏ÏÖò Î≥ÄÍ≤Ω:', session?.user?.email || 'Î°úÍ∑∏ÏïÑÏõÉÎê®');
      
      // ÏÑ∏ÏÖò Î≥ÄÍ≤Ω Ïãú URL ÏóÖÎç∞Ïù¥Ìä∏
      if (session?.user) {
        console.log('Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ - Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô');
        setWebUrl('http://192.168.0.123:50331/');
      } else {
        console.log('Î°úÍ∑∏ÏïÑÏõÉ - Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô');
        setWebUrl('http://192.168.0.123:50331/login');
      }
    });

    // Ïï±Ïù¥ Ìè¨Í∑∏ÎùºÏö¥ÎìúÎ°ú ÎèåÏïÑÏò¨ Îïå ÏÑ∏ÏÖò Ï≤¥ÌÅ¨
    const interval = setInterval(checkSession, 1000); // 1Ï¥àÎßàÎã§ Ï≤¥ÌÅ¨

    // Deep Link Î¶¨Ïä§ÎÑà
    const urlHandler = ({ url }: { url: string }) => {
      console.log('Deep Link Î∞õÏùå:', url);
      if (url.includes('auth/callback')) {
        // URLÏóêÏÑú ÏÑ∏ÏÖò Ï†ïÎ≥¥ Ï∂îÏ∂ú
        const fragment = url.split('#')[1];
        if (fragment) {
          const params = new URLSearchParams(fragment);
          const accessToken = params.get('access_token');
          const refreshToken = params.get('refresh_token');
          
          if (accessToken && refreshToken) {
            console.log('Deep LinkÏóêÏÑú ÌÜ†ÌÅ∞ Î∞úÍ≤¨');
            supabase.auth.setSession({
              access_token: accessToken,
              refresh_token: refreshToken,
            });
          }
        }
      }
    };

    // URL Î¶¨Ïä§ÎÑà Îì±Î°ù
    const urlSubscription = Linking.addEventListener('url', urlHandler);

    // Android Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº Ï≤òÎ¶¨
    const backAction = () => {
      if (webViewRef.current) {
        webViewRef.current.goBack();
        return true; // Í∏∞Î≥∏ Îí§Î°úÍ∞ÄÍ∏∞ ÎèôÏûë Ï∞®Îã®
      }
      return false;
    };

    const backHandler = BackHandler.addEventListener('hardwareBackPress', backAction);

    return () => {
      subscription.unsubscribe();
      clearInterval(interval);
      urlSubscription.remove();
      backHandler.remove();
    };
  }, []);

  // ÏôÑÏ†ÑÌïú WebView Ïï± - ÎÑ§Ïù¥Ìã∞Î∏å ÌôîÎ©¥ ÏóÜÏùå
  return (
    <SafeAreaView style={styles.container}>
      <WebView
        ref={webViewRef}
        source={{ uri: webUrl }}
        style={[styles.webview, {
          marginTop: Platform.OS === 'android' ? 0 : 0, // SafeAreaViewÍ∞Ä Ï≤òÎ¶¨
          marginBottom: Platform.OS === 'android' ? 0 : 0, // SafeAreaViewÍ∞Ä Ï≤òÎ¶¨
        }]}
        originWhitelist={['*']}
        // Ïô∏Î∂Ä ÎßÅÌÅ¨ Ï≤òÎ¶¨ - Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ÎèÑ WebView ÎÇ¥Î∂ÄÏóêÏÑú Ï≤òÎ¶¨
        onShouldStartLoadWithRequest={(request) => {
          console.log('ÏöîÏ≤≠ URL:', request.url);
          
          // Î™®Îì† ÏöîÏ≤≠ÏùÑ WebViewÏóêÏÑú Ï≤òÎ¶¨ (ÏôÑÏ†ÑÌïú ÏõπÏï± Í≤ΩÌóò)
          return true;
        }}
        // iOSÏóêÏÑú SSL Ïò§Î•ò Î¨¥Ïãú
        allowsInlineMediaPlayback={true}
        mediaPlaybackRequiresUserAction={false}
        // SSL Ïù∏Ï¶ùÏÑú Î¨¥Ïãú Î∞è Î≥¥Ïïà ÏÑ§Ï†ï
        mixedContentMode={'always'}
        // Ïø†ÌÇ§ Î∞è ÏÑ∏ÏÖò Ï†ÄÏû• ÌóàÏö©
        sharedCookiesEnabled={true}
        thirdPartyCookiesEnabled={true}
        domStorageEnabled={true}
        startInLoadingState={true}
        // Ï∫êÏãú ÏÑ§Ï†ï - Í∞úÎ∞ú Ï§ëÏóêÎäî Ìï≠ÏÉÅ ÏÉàÎ°úÍ≥†Ïπ®
        cacheEnabled={false}
        incognito={false}
        // Ï∂îÍ∞Ä Î≥¥Ïïà ÏÑ§Ï†ï Î¨¥Ïãú
        allowFileAccess={true}
        onError={(syntheticEvent) => {
          const { nativeEvent } = syntheticEvent;
          console.warn('WebView ÏóêÎü¨:', nativeEvent);
          // SSL Ïò§Î•òÍ∞Ä ÏïÑÎãå Îã§Î•∏ Ïò§Î•òÎßå Ï≤òÎ¶¨
          if (nativeEvent.code !== 3 && !nativeEvent.description?.includes('SSL')) {
            console.error('WebView ÏπòÎ™ÖÏ†Å ÏóêÎü¨:', nativeEvent);
            Alert.alert('Ïó∞Í≤∞ Ïò§Î•ò', 'Ïõπ ÌéòÏù¥ÏßÄÎ•º Î°úÎìúÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
          }
        }}
        onLoadStart={(event) => {
          console.log('WebView Î°úÎî© ÏãúÏûë:', event.nativeEvent.url);
        }}
        onLoadEnd={(event) => {
          console.log('WebView Î°úÎî© ÏôÑÎ£å:', event.nativeEvent.url);
        }}
        injectedJavaScript={`
          (function() {
            console.log('üü¢ WebView JavaScript Ï¥àÍ∏∞Ìôî - Î≤ÑÏ†Ñ 3.0 (ÏúÑÏπò Ï†ïÎ≥¥ ÏßÄÏõê)');
            
            // React Native WebView Ï°¥Ïû¨ ÌôïÏù∏
            if (window.ReactNativeWebView) {
              console.log('‚úÖ ReactNativeWebView Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Î∞úÍ≤¨');
              window.ReactNativeWebView.postMessage(JSON.stringify({
                type: 'debug',
                message: 'WebView Ï¥àÍ∏∞Ìôî ÏôÑÎ£å - ÎÑ§Ïù¥Ìã∞Î∏å ÌÜµÏã† Ï§ÄÎπÑÎê®'
              }));
            } else {
              console.error('‚ùå ReactNativeWebView Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ ÏóÜÏùå');
            }
            
            let lastTokenSent = null;
            let checkCount = 0;
            
            // ÏÑ∏ÏÖò Ï≤¥ÌÅ¨ Ìï®Ïàò
            const checkSession = () => {
              try {
                checkCount++;
                
                // Î°úÍ∑∏Î•º React NativeÎ°ú Ï†ÑÏÜ°
                window.ReactNativeWebView.postMessage(JSON.stringify({
                  type: 'debug',
                  message: 'üîç ÏÑ∏ÏÖò Ï≤¥ÌÅ¨ #' + checkCount
                }));
                
                // ÌòÑÏû¨ URLÍ≥º localStorage ÏÉÅÌÉú Î°úÍπÖ
                window.ReactNativeWebView.postMessage(JSON.stringify({
                  type: 'debug',
                  message: 'üåê ÌòÑÏû¨ URL: ' + window.location.href
                }));
                
                // Î™®Îì† localStorage ÌÇ§Îì§ ÌôïÏù∏
                const allKeys = Object.keys(localStorage);
                window.ReactNativeWebView.postMessage(JSON.stringify({
                  type: 'debug',
                  message: 'üóÇÔ∏è localStorage ÌÇ§Îì§: ' + JSON.stringify(allKeys)
                }));
                
                // user-token ÏÉÅÏÑ∏ ÌôïÏù∏
                const userToken = localStorage.getItem('user-token');
                window.ReactNativeWebView.postMessage(JSON.stringify({
                  type: 'debug',
                  message: 'üîë user-token Ï°¥Ïû¨: ' + (userToken ? 'YES' : 'NO')
                }));
                
                if (userToken) {
                  window.ReactNativeWebView.postMessage(JSON.stringify({
                    type: 'debug',
                    message: 'üîë user-token Í∏∏Ïù¥: ' + userToken.length
                  }));
                  
                  window.ReactNativeWebView.postMessage(JSON.stringify({
                    type: 'debug',
                    message: 'üîë user-token ÎØ∏Î¶¨Î≥¥Í∏∞: ' + userToken.substring(0, 200) + '...'
                  }));
                }
                
                if (userToken) {
                  try {
                    const tokenData = JSON.parse(userToken);
                    console.log('üîë ÌååÏã±Îêú ÌÜ†ÌÅ∞ Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤¥:', tokenData);
                    console.log('üîë ÌÜ†ÌÅ∞ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞:', {
                      type: typeof tokenData,
                      keys: Object.keys(tokenData || {}),
                      hasCurrentSession: !!tokenData.currentSession,
                      hasAccessToken: !!(tokenData.currentSession?.access_token),
                      expiresAt: tokenData.currentSession?.expires_at
                    });
                    
                    // ÌÜ†ÌÅ∞Ïù¥ ÏûàÍ≥† Ïù¥Ï†ÑÏóê Î≥¥ÎÇ∏ Í≤ÉÍ≥º Îã§Î•¥Î©¥ Ï†ÑÏÜ°
                    if (userToken !== lastTokenSent) {
                      console.log('üì§ ÏÉàÎ°úÏö¥ ÏÑ∏ÏÖò ÌÜ†ÌÅ∞ÏùÑ React NativeÎ°ú Ï†ÑÏÜ°');
                      lastTokenSent = userToken;
                      
                      window.ReactNativeWebView.postMessage(JSON.stringify({
                        type: 'user-token',
                        data: userToken
                      }));
                    }
                  } catch (parseError) {
                    console.error('üî¥ ÌÜ†ÌÅ∞ ÌååÏã± ÏóêÎü¨:', parseError);
                    console.log('üî¥ ÌååÏã± Ïã§Ìå®Ìïú ÏõêÎ≥∏ Îç∞Ïù¥ÌÑ∞:', userToken);
                  }
                } else {
                  console.log('üîë user-tokenÏù¥ localStorageÏóê ÏóÜÏùå');
                }
                
              } catch (error) {
                console.error('üî¥ ÏÑ∏ÏÖò Ï≤¥ÌÅ¨ ÏóêÎü¨:', error);
              }
            };
            
            // Ï¥àÍ∏∞ Ï≤¥ÌÅ¨ (Ï¶âÏãú)
            checkSession();
            
            // 1Ï¥à ÌõÑ Ï≤¥ÌÅ¨
            setTimeout(checkSession, 1000);
            
            // 3Ï¥à ÌõÑ Ï≤¥ÌÅ¨  
            setTimeout(checkSession, 3000);
            
            // Ï£ºÍ∏∞Ï†Å Ï≤¥ÌÅ¨ (5Ï¥àÎßàÎã§)
            const interval = setInterval(checkSession, 5000);
            
            // ÌéòÏù¥ÏßÄ Ïñ∏Î°úÎìú Ïãú Ï†ïÎ¶¨
            window.addEventListener('beforeunload', () => {
              clearInterval(interval);
            });
            
            console.log('‚úÖ WebView JavaScript ÏÑ§Ï†ï ÏôÑÎ£å');
          })();
        `}
        onMessage={async (event) => {
          try {
            console.log('üì® WebView ÏõêÎ≥∏ Î©îÏãúÏßÄ:', event.nativeEvent.data);
            const message = JSON.parse(event.nativeEvent.data);
            console.log('üì® ÌååÏã±Îêú Î©îÏãúÏßÄ:', message);
            
            if (message.type === 'debug') {
              console.log('üêõ Debug:', message.message);
              return;
            }
            
            // ÎÑ§Ïù¥Ìã∞Î∏å ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠ Ï≤òÎ¶¨
            if (message.type === 'request-native-location') {
              console.log('üìç ÎÑ§Ïù¥Ìã∞Î∏å ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠ Î∞õÏùå');
              console.log('üîç handleLocationRequest Ìï®Ïàò ÌÉÄÏûÖ:', typeof handleLocationRequest);
              console.log('üîç Location Î™®Îìà Ï°¥Ïû¨:', !!Location);
              
              // Ï¶âÏãú ÏùëÎãµÏùÑ Î≥¥ÎÇ¥ÏÑú ÌÜµÏã†Ïù¥ ÏûëÎèôÌïòÎäîÏßÄ ÌôïÏù∏
              const ackScript = `
                (function() {
                  console.log('‚úÖ React NativeÍ∞Ä ÏúÑÏπò ÏöîÏ≤≠ÏùÑ Î∞õÏïòÏäµÎãàÎã§');
                })();
              `;
              webViewRef.current?.injectJavaScript(ackScript);
              
              // handleLocationRequest Ìï®Ïàò Ìò∏Ï∂ú
              await handleLocationRequest();
              return;
            }
            
            if (message.type === 'user-token' && message.data) {
              console.log('üîë user-app ÌÜ†ÌÅ∞ Î∞úÍ≤¨, ÌååÏã± ÏãúÎèÑ');
              
              try {
                const tokenData = JSON.parse(message.data);
                console.log('üîë ÌÜ†ÌÅ∞ Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞:', {
                  hasCurrentSession: !!tokenData?.currentSession,
                  hasAccessToken: !!(tokenData?.access_token || tokenData?.currentSession?.access_token),
                  hasRefreshToken: !!(tokenData?.refresh_token || tokenData?.currentSession?.refresh_token),
                  topLevelKeys: Object.keys(tokenData || {})
                });
                
                // Îëê Í∞ÄÏßÄ Íµ¨Ï°∞ Î™®Îëê ÏßÄÏõê
                let access_token, refresh_token;
                
                if (tokenData?.currentSession) {
                  // ÏòàÏÉÅ Íµ¨Ï°∞: currentSession ÏïàÏóê ÌÜ†ÌÅ∞Îì§
                  access_token = tokenData.currentSession.access_token;
                  refresh_token = tokenData.currentSession.refresh_token;
                  console.log('üîë currentSession Íµ¨Ï°∞ ÏÇ¨Ïö©');
                } else if (tokenData?.access_token) {
                  // Ïã§Ï†ú Íµ¨Ï°∞: ÏµúÏÉÅÏúÑ Î†àÎ≤®Ïóê ÌÜ†ÌÅ∞Îì§
                  access_token = tokenData.access_token;
                  refresh_token = tokenData.refresh_token;
                  console.log('üîë ÏµúÏÉÅÏúÑ Î†àÎ≤® Íµ¨Ï°∞ ÏÇ¨Ïö©');
                } else {
                  console.warn('‚ö†Ô∏è Ïïå Ïàò ÏóÜÎäî ÌÜ†ÌÅ∞ Íµ¨Ï°∞:', tokenData);
                }
                
                if (access_token && refresh_token) {
                  console.log('üöÄ Supabase ÏÑ∏ÏÖò ÏÑ§Ï†ï Ï§ë...', {
                    access_token_length: access_token.length,
                    refresh_token_length: refresh_token.length
                  });
                  
                  supabase.auth.setSession({
                    access_token,
                    refresh_token,
                  }).then((result) => {
                    console.log('‚úÖ Supabase ÏÑ∏ÏÖò ÏÑ§Ï†ï ÏôÑÎ£å:', result.error ? 'Ïã§Ìå®' : 'ÏÑ±Í≥µ');
                    if (result.error) {
                      console.error('üî¥ ÏÑ∏ÏÖò ÏÑ§Ï†ï ÏóêÎü¨:', result.error);
                    }
                  }).catch((error) => {
                    console.error('üî¥ ÏÑ∏ÏÖò ÏÑ§Ï†ï Ïã§Ìå®:', error);
                  });
                } else {
                  console.warn('‚ö†Ô∏è access_token ÎòêÎäî refresh_tokenÏù¥ ÏóÜÏùå');
                }
              } catch (parseError) {
                console.error('üî¥ ÌÜ†ÌÅ∞ Îç∞Ïù¥ÌÑ∞ ÌååÏã± ÏóêÎü¨:', parseError);
              }
            }
          } catch (error) {
            console.error('üî¥ Î©îÏãúÏßÄ ÌååÏã± ÏóêÎü¨:', error);
          }
        }}
      />
      <StatusBar style="dark" />
    </SafeAreaView>
  );
}

export default function App() {
  return (
    <SafeAreaProvider>
      <AppContent />
    </SafeAreaProvider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  webview: {
    flex: 1,
  },
});